Selector element or attribute or class
-------------------------------
selector: "app-servers"
<app-servers></app-servers>

selector: "[app-servers]"
<div app-servers></div>

selector: ".app-servers"
<div class="app-servers"></div>

NOTE: Select by id or CSS pseudo selectors won't work!
=================================================================

Databinding

OUTPUT
-------
String Interpolation ({{ data }})             // Only ternary expressions, no block
Property Binding ( [property]="data" )

INPUT
-------
Event Binding ( (event)="expression" )

BOTH
-------
Two-way Binding ( [(ngModel)]="data" )

=============================================
==================== CLI ====================
=============================================
ng generate component <componentName>
ng g c <componentName>
ng g c <componentName> --skip-tests
ng g c <folder>/<componentName>


=================================================================

Custom property and event Binding
----------------------------------
-------- parent ==> child --------
----------------------------------
We need to add a decorator to child component
(just like passing down React props to children)

  @Input(<property alias>) element;

and at the parent component we pass down the value

  <app-child
    [<element or property alias>]="<variable>"
  ></app-child>

----------------------------------
-------- child ==> parent --------
----------------------------------
At child element:

  @Output(<alias>) <event name> = new EventEmitter()

  method x() {
    this.<event name>.emit(<data>)
  }

and at the parent component:

  <app-child
    (<custom event>)="method($event)"
  ></app-child>

and we add the method to parent
===============================================

CSS Encapsulation

@Component({
  ...,
  encapsulation: ViewEncapsulation.Emulated | None | ShadowDom
})

Emulated(default): CSS apply to component Only
None: CSS global
ShadowDom: like Emulated only in supported browsers

















